# An example configuration file for make_stub_files.py.
# By default, make_stub_files.py uses ~/stubs/make_stub_files.cfg.
# Can be changed using the --config=path command-line option.

[Global]

files :
    ~/git/tgintegration/tgintegration/*.py
    ~/git/tgintegration/tgintegration/containers/*.py

output_directory : ~/git/tgintegration/tgintegration/stubs

prefix_lines :
# Lines to be inserted at the start of each stub file.
    from typing import TypeVar, Union, List, Optional, Pattern
    from tgintegration import InteractionClient, BotController
    from tgintegration import AwaitableAction, Response


[Def Name Patterns]

send: Message
.*_await$: Response
act_await_response: Response
start: None
num_*: int
empty: bool

# These regex patterns give the return types of functions or methods.
#
# Patterns for methods should match class_name.method_name.
#
# Patterns in this section *override* all other patterns,
# so you should use these patterns only if:
#
# - No other pattern properly handles the function or method, or
#
# - The pattern specifies functions that should all return the same value.
#   For example, all ast tree traversers should have the same signatures.
#
# It may be unwise to use .* in this section, but the choice is yours.
;[Argument Patterns]
;.*messages.*$: List[Message]

# The regex patterns in this section apply only when assigning types
# to *arguments* to functions or methods. Patterns match argument names.
# Typically, most patterns can be put [General Patterns] section instead.

[General Patterns]

# The patterns in this section may be either regex or balanced patterns.
# Patterns in this section are applied both to arguments and return expressions.
# These patterns are applied *once* to argument names and *repeatedly* to
# return types until no further matches can be made.

; TgIntegration Types
response: Response
action: AwaitableAction

debug: bool
session_name: str
api_id: int
api_hash: str
phone_number: int
max_wait_response: float
min_wait_consecutive: float
global_delay: float
raise_no_response: bool
.*filters$: Filter
Filters : Filter
location_or_geo: Union[tuple, InputGeoPoint]
geo_point: InputGeoPoint
pattern: Pattern

;aList[1-3]?: Sequence
;           i: int
;           j: int
;           k: int
;           node: ast.Ast
;           s[1-3]?: str

;[Return Patterns]
;# The patterns in this section may be either regex or balanced patterns.
;# Patterns in this section are applied only to return expressions.
;# These patterns are applied *repeatedly* to return expressions
;# until no further matches can be made.
;
;# Balanced patterns...
;
;repr(*): str
;str.join(*): str
;str.replace(*): str
;str%(*): str
;str%str: str
;
# Regex patterns...
;
.*__name__: str
.*__str__: str
